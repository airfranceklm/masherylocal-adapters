Filtering on a single HTTP Headers with headers suppressed:
  desc: Test how filtering works on a single HTTP headers.

  endpoint:
    service id: srvId
    endpoint id: endpId
    endpoint name: unit-test-endpoint
    endpoint uri: https://api-unitttest.airfranceklm.com/api-path

    pre-processor configuration:
      filter-requestHeader(content-type): application/json.*
      expand-input: -headers

  cases:
    positive confirmation:
      client:
        remote address: 123.456.789.012
        http verb: POST
        uri: https://api-unitttest.airfranceklm.com/api-path/path/to/op?myQuery=123&p1=djfr
        headers:
          A: B
          C: D
          Content-Type: application/json+super-custom-extension
        body: ABC

      key:
        package key: dfgf
        application:
          name: the-app


      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      sidecar:
        input:
          synchronicity: Event
          point: PreProcessor
          params:
            requestHeader:
              content-type: application/json+super-custom-extension
          packageKey: dfgf
          serviceId: srvId
          endpointId: endpId

        output:
        # An empty object, do nothing.


Filtering on a single HTTP Headers:
  desc: Test how filtering works on a single HTTP headers.

  endpoint:
    service id: srvId
    endpoint id: endpId
    endpoint name: unit-test-endpoint
    endpoint uri: https://api-unitttest.airfranceklm.com/api-path

    pre-processor configuration:
      filter-requestHeader(content-type): application/json.*
      expand-input: "+requestheaders"

  cases:
    positive confirmation:
      client:
        remote address: 123.456.789.012
        http verb: POST
        uri: https://api-unitttest.airfranceklm.com/api-path/path/to/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
        body: ABC

      key:
        package key: dfgf
        application:
          name: the-app


      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      sidecar:
        input:
          synchronicity: Event
          point: PreProcessor
          params:
            requestHeader:
              content-type: application/json+super-custom-extension
          request:
            headers:
              a: B
              content-type: application/json+super-custom-extension
          packageKey: dfgf
          serviceId: srvId
          endpointId: endpId

        output:
            # An empty object, do nothing.

    filtered-out confirmation:
      client:
        remote address: 123.456.789.012
        http verb: POST
        uri: https://api-unitttest.airfranceklm.com/api-path/path/to/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/NON-json+super-custom-extension
        body: ABC

      key:
        as in: positive confirmation

      request to the api provider:
        as in: positive confirmation

      # In this test, Lambda should not be even called.

Filtering on a multiple HTTP Headers:
  desc: Test how filtering works on a single HTTP headers.

  endpoint:
    service id: srvId
    endpoint id: endpId
    endpoint name: unit-test-endpoint
    endpoint uri: https://api-unitttest.airfranceklm.com/api-path

    pre-processor configuration:
      filter-requestHeader(content-type): application/json.*
      filterout-requestHeader(afklm-market): US|BR|GR

  cases:
    positive confirmation:
      client:
        remote address: 123.456.789.012
        http verb: POST
        uri: https://api-unitttest.airfranceklm.com/api-path/path/to/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        package key: dfgf
        application:
          name: the-app


      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      sidecar:
        input:
          synchronicity: Event
          point: PreProcessor
          params:
            requestHeader:
              content-type: application/json+super-custom-extension
              afklm-market: NL
          request:
            headers:
              a: B
              content-type: application/json+super-custom-extension
              afklm-market: NL
          packageKey: dfgf
          serviceId: srvId
          endpointId: endpId

        output:
            # An empty object, do nothing.

    filtered-out confirmation:
      client:
        remote address: 123.456.789.012
        http verb: POST
        uri: https://api-unitttest.airfranceklm.com/api-path/path/to/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/NON-json+super-custom-extension
        body: ABC

      key:
        as in: positive confirmation

      request to the api provider:
        as in: positive confirmation

      # In this test, Lambda should not be even called.


Inclusive Filtering on a HTTP verb:
  desc: Test how filtering works on a single HTTP headers.

  endpoint:
    service id: srvId
    endpoint id: endpId
    endpoint name: unit-test-endpoint
    endpoint uri: https://api-unitttest.airfranceklm.com/api-path

    pre-processor configuration:
      filter-httpVerb: GET|HEAD
      expand-input: -headers

  cases:
    positive confirmation:
      client:
        remote address: 123.456.789.012
        http verb: GET
        uri: https://api-unitttest.airfranceklm.com/api-path/path/to/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        package key: dfgf
        application:
          name: the-app


      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      sidecar:
        input:
          synchronicity: Event
          point: PreProcessor
          params:
            httpVerb: get
          packageKey: dfgf
          serviceId: srvId
          endpointId: endpId

        output:
            # An empty object, do nothing.

    filtered-out confirmation:
      client:
        remote address: 123.456.789.012
        http verb: POST
        uri: https://api-unitttest.airfranceklm.com/api-path/path/to/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        as in: positive confirmation

      request to the api provider:
        as in: positive confirmation

      # In this test, Lambda should not be even called.

Exclusive Filtering on a HTTP verb:
  desc: Test how filtering works on a single HTTP headers.

  endpoint:
    service id: srvId
    endpoint id: endpId
    endpoint name: unit-test-endpoint
    endpoint uri: https://api-unitttest.airfranceklm.com/api-path

    pre-processor configuration:
      filterout-httpVerb: GET|HEAD
      expand-input: -headers

  cases:
    positive confirmation:
      client:
        remote address: 123.456.789.012
        http verb: POST
        uri: https://api-unitttest.airfranceklm.com/api-path/path/to/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        package key: dfgf
        application:
          name: the-app


      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      sidecar:
        input:
          synchronicity: Event
          point: PreProcessor
          params:
           httpVerb: post
          packageKey: dfgf
          serviceId: srvId
          endpointId: endpId

        output:
            # An empty object, do nothing.

    filtered-out confirmation:
      client:
        remote address: 123.456.789.012
        http verb: GET
        uri: https://api-unitttest.airfranceklm.com/api-path/path/to/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        as in: positive confirmation

      request to the api provider:
        as in: positive confirmation

      # In this test, Lambda should not be even called.


Inclusive filtering on a operation path:
  desc: Test how filtering works on a single operation path.

  endpoint:
    service id: srvId
    endpoint id: endpId
    endpoint name: unit-test-endpoint
    endpoint uri: https://api-unitttest.airfranceklm.com/api-path

    pre-processor configuration:
      filter-resourcePath: /path/to/{v1}/*
      expand-input: -headers

  cases:
    positive confirmation:
      client:
        remote address: 123.456.789.012
        http verb: GET
        uri: https://api-unitttest.airfranceklm.com/api-path/path/to/api-version_v1/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        package key: dfgf
        application:
          name: the-app


      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      sidecar:
        input:
          synchronicity: Event
          point: PreProcessor
          params:
            resourcePath: /path/to/api-version_v1/op
          packageKey: dfgf
          serviceId: srvId
          endpointId: endpId

        output:
        # An empty object, do nothing.

    filtered-out confirmation:
      client:
        remote address: 123.456.789.012
        http verb: POST
        uri: https://api-unitttest.airfranceklm.com/api-path/path/from/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        as in: positive confirmation

      request to the api provider:
        as in: positive confirmation

      # In this test, Lambda should not be even called.
Exclusive filtering on a operation path:
  desc: Test how filtering works on a single operation path.

  endpoint:
    service id: srvId
    endpoint id: endpId
    endpoint name: unit-test-endpoint
    endpoint uri: https://api-unitttest.airfranceklm.com/api-path

    pre-processor configuration:
      filterout-resourcePath: /path/to/{v1}/*
      expand-input: -headers

  cases:
    positive confirmation:
      client:
        remote address: 123.456.789.012
        http verb: GET
        uri: https://api-unitttest.airfranceklm.com/api-path/path/from/api-version_v1/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        package key: dfgf
        application:
          name: the-app


      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      sidecar:
        input:
          synchronicity: Event
          point: PreProcessor
          params:
            resourcePath: /path/from/api-version_v1/op
          packageKey: dfgf
          serviceId: srvId
          endpointId: endpId

        output:
        # An empty object, do nothing.

    filtered-out confirmation:
      client:
        remote address: 123.456.789.012
        http verb: POST
        uri: https://api-unitttest.airfranceklm.com/api-path/path/to/api-version_v1/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        as in: positive confirmation

      request to the api provider:
        as in: positive confirmation

      # In this test, Lambda should not be even called.

Inclusive filtering on a package key:
  desc: Test how filtering works on a single operation path.

  endpoint:
    service id: srvId
    endpoint id: endpId
    endpoint name: unit-test-endpoint
    endpoint uri: https://api-unitttest.airfranceklm.com/api-path

    pre-processor configuration:
      filter-packageKey: abc,def;ghi|jkl
      expand-input: -headers

  cases:
    positive confirmation:
      client:
        remote address: 123.456.789.012
        http verb: GET
        uri: https://api-unitttest.airfranceklm.com/api-path/path/to/api-version_v1/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        package key: def
        application:
          name: the-app


      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      sidecar:
        input:
          synchronicity: Event
          point: PreProcessor
          params:
            packageKey: def
          packageKey: def
          serviceId: srvId
          endpointId: endpId

        output:
        # An empty object, do nothing.

    filtered-out confirmation:
      client:
        remote address: 123.456.789.012
        http verb: POST
        uri: https://api-unitttest.airfranceklm.com/api-path/path/from/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        package key: key-that-is-out-of-scope
        application:
          name: the-app

      request to the api provider:
        as in: positive confirmation

      # In this test, Lambda should not be even called.

Exclusive filtering on a package key:
  desc: Test how filtering works on a single package key.

  endpoint:
    service id: srvId
    endpoint id: endpId
    endpoint name: unit-test-endpoint
    endpoint uri: https://api-unitttest.airfranceklm.com/api-path

    pre-processor configuration:
      filterout-packageKey: abc,def;ghi|jkl
      expand-input: -headers

  cases:
    positive confirmation:
      client:
        remote address: 123.456.789.012
        http verb: GET
        uri: https://api-unitttest.airfranceklm.com/api-path/path/to/api-version_v1/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        package key: key-that-is-out-of-scope
        application:
          name: the-app


      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      sidecar:
        input:
          synchronicity: Event
          point: PreProcessor
          params:
            packageKey: key-that-is-out-of-scope
          packageKey: key-that-is-out-of-scope
          serviceId: srvId
          endpointId: endpId

        output:
        # An empty object, do nothing.

    filtered-out confirmation:
      client:
        remote address: 123.456.789.012
        http verb: POST
        uri: https://api-unitttest.airfranceklm.com/api-path/path/from/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        package key: jkl
        application:
          name: the-app

      request to the api provider:
        as in: positive confirmation

      # In this test, Lambda should not be even called.

Inclusive filtering on scope:
  desc: Test how filtering works on a single operation path.

  endpoint:
    service id: srvId
    endpoint id: endpId
    endpoint name: unit-test-endpoint
    endpoint uri: https://api-unitttest.airfranceklm.com/api-path

    pre-processor configuration:
      filter-scope-pax: .*role:pax.*
      filter-scope-bax: .*role:bax.*
      expand-input: -headers

  cases:
    positive confirmation:
      client:
        remote address: 123.456.789.012
        http verb: GET
        uri: https://api-unitttest.airfranceklm.com/api-path/path/to/api-version_v1/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        package key: def
        application:
          name: the-app

      authorization context:
        scope: "role:customer, role:pax"
        user context: "123 user-context 456"
        grant type: CC
        expires: "2020-03-24T13:48:09Z"


      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      sidecar:
        input:
          synchronicity: Event
          point: PreProcessor
          params:
            scope: role:customer, role:pax
            scopeLabel: pax
          packageKey: def
          serviceId: srvId
          endpointId: endpId

        output:
        # An empty object, do nothing.

    filtered-out confirmation:
      client:
        remote address: 123.456.789.012
        http verb: POST
        uri: https://api-unitttest.airfranceklm.com/api-path/path/from/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        package key: key-that-is-out-of-scope
        application:
          name: the-app

      authorization context:
        scope: "scope-that-should-not-match"
        user context: "123 user-context 456"
        grant type: CC
        expires: "2020-03-24T13:48:09Z"

      request to the api provider:
        as in: positive confirmation

      # In this test, Lambda should not be even called.

    filtered-out nulls confirmation:
      client:
        as in: filtered-out confirmation

      key:
        as in: filtered-out confirmation

      request to the api provider:
        as in: positive confirmation

      # In this test, Lambda should not be even called.

Exclusive filtering on a scope:
  desc: Test how filtering works on a single package key.

  endpoint:
    service id: srvId
    endpoint id: endpId
    endpoint name: unit-test-endpoint
    endpoint uri: https://api-unitttest.airfranceklm.com/api-path

    pre-processor configuration:
      filterout-scope-pax: .*role:pax.*
      filterout-scope-bax: .*role:bax.*
      expand-input: -headers

  cases:
    positive confirmation:
      client:
        remote address: 123.456.789.012
        http verb: GET
        uri: https://api-unitttest.airfranceklm.com/api-path/path/to/api-version_v1/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        package key: aKey
        application:
          name: the-app

      authorization context:
        scope: "role:unit-tester-that-roxx"
        user context: "123 user-context 456"
        grant type: CC
        expires: "2020-03-24T13:48:09Z"


      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      sidecar:
        input:
          synchronicity: Event
          point: PreProcessor
          params:
            scope: role:unit-tester-that-roxx
          packageKey: aKey
          serviceId: srvId
          endpointId: endpId

        output:
        # An empty object, do nothing.

    filtered-out confirmation:
      client:
        as in: positive confirmation

      key:
        as in: positive confirmation

      request to the api provider:
        as in: positive confirmation

      # In this test, Lambda should not be even called.
      authorization context:
        scope: "role:customer, role:pax"
        user context: "123 user-context 456"
        grant type: CC
        expires: "2020-03-24T13:48:09Z"

    null inclusion confirmation:
      client:
        as in: positive confirmation

      key:
        as in: positive confirmation

      request to the api provider:
        as in: positive confirmation

      sidecar:
        input:
          synchronicity: Event
          point: PreProcessor
          params:
            scope: null
          packageKey: aKey
          serviceId: srvId
          endpointId: endpId

        output:
        # An empty object, do nothing.


Inclusive filtering on userContext:
  desc: Test how filtering works on a single operation path.

  endpoint:
    service id: srvId
    endpoint id: endpId
    endpoint name: unit-test-endpoint
    endpoint uri: https://api-unitttest.airfranceklm.com/api-path

    pre-processor configuration:
      filter-userContext-pax: .*role:pax.*
      filter-userContext-bax: .*role:bax.*
      expand-input: -headers

  cases:
    positive confirmation:
      client:
        remote address: 123.456.789.012
        http verb: GET
        uri: https://api-unitttest.airfranceklm.com/api-path/path/to/api-version_v1/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        package key: def
        application:
          name: the-app

      authorization context:
        scope: "some-scope"
        user context: "role:customer, role:pax"
        grant type: CC
        expires: "2020-03-24T13:48:09Z"


      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      sidecar:
        input:
          synchronicity: Event
          point: PreProcessor
          params:
            userContext: role:customer, role:pax
            userContextLabel: pax
          packageKey: def
          serviceId: srvId
          endpointId: endpId

        output:
        # An empty object, do nothing.

    filtered-out confirmation:
      client:
        remote address: 123.456.789.012
        http verb: POST
        uri: https://api-unitttest.airfranceklm.com/api-path/path/from/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        package key: key-that-is-out-of-scope
        application:
          name: the-app

      authorization context:
        scope: "a scope"
        user context: "the-one-that-should-not-match"
        grant type: CC
        expires: "2020-03-24T13:48:09Z"

      request to the api provider:
        as in: positive confirmation

      # In this test, Lambda should not be even called.

    filtered-out nulls confirmation:
      client:
        as in: filtered-out confirmation

      key:
        as in: filtered-out confirmation

      request to the api provider:
        as in: positive confirmation

      # In this test, Lambda should not be even called.

Exclusive filtering on a userContext:
  desc: Test how filtering works on a single package key.

  endpoint:
    service id: srvId
    endpoint id: endpId
    endpoint name: unit-test-endpoint
    endpoint uri: https://api-unitttest.airfranceklm.com/api-path

    pre-processor configuration:
      filterout-userContext-pax: .*role:pax.*
      filterout-userContext-bax: .*role:bax.*
      expand-input: -headers

  cases:
    positive confirmation:
      client:
        remote address: 123.456.789.012
        http verb: GET
        uri: https://api-unitttest.airfranceklm.com/api-path/path/to/api-version_v1/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        package key: aKey
        application:
          name: the-app

      authorization context:
        scope: "a scope"
        user context: "role:unit-tester-that-roxx"
        grant type: CC
        expires: "2020-03-24T13:48:09Z"


      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      sidecar:
        input:
          synchronicity: Event
          point: PreProcessor
          params:
            userContext: role:unit-tester-that-roxx
          packageKey: aKey
          serviceId: srvId
          endpointId: endpId

        output:
        # An empty object, do nothing.

    filtered-out confirmation:
      client:
        as in: positive confirmation

      key:
        as in: positive confirmation

      request to the api provider:
        as in: positive confirmation

      # In this test, Lambda should not be even called.
      authorization context:
        scope: "a scope"
        user context: "role:customer, role:pax"
        grant type: CC
        expires: "2020-03-24T13:48:09Z"

    null inclusion confirmation:
      client:
        as in: positive confirmation

      key:
        as in: positive confirmation

      request to the api provider:
        as in: positive confirmation

      sidecar:
        input:
          synchronicity: Event
          point: PreProcessor
          params:
            userContext: null
          packageKey: aKey
          serviceId: srvId
          endpointId: endpId

        output:
        # An empty object, do nothing.

Inclusive filtering on eav:
  desc: Test how filtering works on a single operation path.

  endpoint:
    service id: srvId
    endpoint id: endpId
    endpoint name: unit-test-endpoint
    endpoint uri: https://api-unitttest.airfranceklm.com/api-path

    pre-processor configuration:
      filter-eav(pax)-internal: KL|AF
      filter-eav(pax)-partner: Google|SkyScanner
      expand-input: -headers

  cases:
    positive confirmation:
      client:
        remote address: 123.456.789.012
        http verb: GET
        uri: https://api-unitttest.airfranceklm.com/api-path/path/to/api-version_v1/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        package key: def
        application:
          name: the-app
          extended attributes:
            pax: KL

      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      sidecar:
        input:
          synchronicity: Event
          point: PreProcessor
          params:
            eav:
              pax: KL
              paxLabel: internal
          packageKey: def
          serviceId: srvId
          endpointId: endpId

        output:
        # An empty object, do nothing.

    filtered-out confirmation:
      client:
        remote address: 123.456.789.012
        http verb: POST
        uri: https://api-unitttest.airfranceklm.com/api-path/path/from/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        package key: key-that-is-out-of-scope
        application:
          name: the-app
          extended attribute:
            pax: Kayak

      request to the api provider:
        as in: positive confirmation

      # In this test, Lambda should not be even called.

    filtered-out nulls confirmation:
      client:
        as in: filtered-out confirmation

      # no EAV defined, so the filter-out must happen.
      key:
        package key: def
        application:
          name: the-app

      request to the api provider:
        as in: positive confirmation

      # In this test, Lambda should not be even called.

Exclusive filtering on a eav:
  desc: Test how filtering works on a single package key.

  endpoint:
    service id: srvId
    endpoint id: endpId
    endpoint name: unit-test-endpoint
    endpoint uri: https://api-unitttest.airfranceklm.com/api-path

    pre-processor configuration:
      filterout-eav(pax)-internal: KL|AF
      filterout-eav(pax)-partner: Google|SkyScanner
      expand-input: -headers

  cases:
    positive confirmation:
      client:
        remote address: 123.456.789.012
        http verb: GET
        uri: https://api-unitttest.airfranceklm.com/api-path/path/to/api-version_v1/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        package key: aKey
        application:
          name: the-app
          extended attributes:
            pax: Kayak


      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      sidecar:
        input:
          synchronicity: Event
          point: PreProcessor
          params:
            eav:
              pax: Kayak
          packageKey: aKey
          serviceId: srvId
          endpointId: endpId

        output:
        # An empty object, do nothing.

    filtered-out confirmation:
      client:
        as in: positive confirmation

      # The filter-out will occur here.
      key:
        package key: aKey
        application:
          name: the-app
          extended attributes:
            pax: Google

      request to the api provider:
        as in: positive confirmation



    null inclusion confirmation:
      client:
        as in: positive confirmation

      # If filtering out, then request withou EAV are in the scope.
      key:
        package key: aKey
        application:
          name: the-app


      request to the api provider:
        as in: positive confirmation

      sidecar:
        input:
          synchronicity: Event
          point: PreProcessor
          params:
            eav:
              pax: null
          packageKey: aKey
          serviceId: srvId
          endpointId: endpId

        output:
        # An empty object, do nothing.

Inclusive filtering on packageKeyEAV:
  desc: Test how filtering works on a single operation path.

  endpoint:
    service id: srvId
    endpoint id: endpId
    endpoint name: unit-test-endpoint
    endpoint uri: https://api-unitttest.airfranceklm.com/api-path

    pre-processor configuration:
      filter-packageKeyEAV(pax)-internal: KL|AF
      filter-packageKeyEAV(pax)-partner: Google|SkyScanner
      expand-input: -headers

  cases:
    positive confirmation:
      client:
        remote address: 123.456.789.012
        http verb: GET
        uri: https://api-unitttest.airfranceklm.com/api-path/path/to/api-version_v1/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        package key: def
        extended attributes:
          pax: KL
        application:
          name: the-app

      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      sidecar:
        input:
          synchronicity: Event
          point: PreProcessor
          params:
            packageKeyEAV:
              pax: KL
              paxLabel: internal
          packageKey: def
          serviceId: srvId
          endpointId: endpId

        output:
        # An empty object, do nothing.

    filtered-out confirmation:
      client:
        remote address: 123.456.789.012
        http verb: POST
        uri: https://api-unitttest.airfranceklm.com/api-path/path/from/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        package key: key-that-is-out-of-scope
        extended attribute:
          pax: Kayak
        application:
          name: the-app

      request to the api provider:
        as in: positive confirmation

      # In this test, Lambda should not be even called.

    filtered-out nulls confirmation:
      client:
        as in: filtered-out confirmation

      # no EAV defined, so the filter-out must happen.
      key:
        package key: def
        application:
          name: the-app

      request to the api provider:
        as in: positive confirmation

      # In this test, Lambda should not be even called.

Exclusive filtering on a packageKeyEAV:
  desc: Test how filtering works on a single package key.

  endpoint:
    service id: srvId
    endpoint id: endpId
    endpoint name: unit-test-endpoint
    endpoint uri: https://api-unitttest.airfranceklm.com/api-path

    pre-processor configuration:
      filterout-packageKeyEAV(pax)-internal: KL|AF
      filterout-packageKeyEAV(pax)-partner: Google|SkyScanner
      expand-input: -headers

  cases:
    positive confirmation:
      client:
        remote address: 123.456.789.012
        http verb: GET
        uri: https://api-unitttest.airfranceklm.com/api-path/path/to/api-version_v1/op?myQuery=123&p1=djfr
        headers:
          A: B
          Content-Type: application/json+super-custom-extension
          AFKLM-Market: NL
        body: ABC

      key:
        package key: aKey
        extended attributes:
          pax: Kayak

        application:
          name: the-app

      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      sidecar:
        input:
          synchronicity: Event
          point: PreProcessor
          params:
            packageKeyEAV:
              pax: Kayak
          packageKey: aKey
          serviceId: srvId
          endpointId: endpId

        output:
        # An empty object, do nothing.

    filtered-out confirmation:
      client:
        as in: positive confirmation

      # The filter-out will occur here.
      key:
        package key: aKey
        extended attributes:
          pax: Google

        application:
          name: the-app

      request to the api provider:
        as in: positive confirmation

    null inclusion confirmation:
      client:
        as in: positive confirmation

      # If filtering out, then request withou EAV are in the scope.
      key:
        package key: aKey
        application:
          name: the-app

      request to the api provider:
        as in: positive confirmation

      sidecar:
        input:
          synchronicity: Event
          point: PreProcessor
          params:
            packageKeyEAV:
              pax: null
          packageKey: aKey
          serviceId: srvId
          endpointId: endpId

        output:
        # An empty object, do nothing.

