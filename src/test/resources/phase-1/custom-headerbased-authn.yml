Authorization Servers issued JWT Tokens Validation:
  desc: In this case, AFKLM looks to replace ROPC tokens with JWT tokens that are issued by the authorization servers.
     The difference with the _Custom Header-Based Authentication_ is that the neccesary validation keys are known
     by the lambda already. However, the endpoint specifies parameters for the validation that the client must meeet
     in order to be granted accesss.

  use cases:
    - Replace ROPC and AC tokens with ASFC-issued JWT tokens.

  endpoint:
    service id: aServiceId
    endpoint id: anEndpointId
    endpoint name: unit-test-endpoint

    pre-processor configuration:
      # Headers should be present and should contain value in it.
      synchronicity: request-response
      expand-input: remoteAddress
      require-request-headers: authorization
      sidecar-param-B2C: "false"
      sidecar-param-B2E: "true"
      sidecar-param-depts: KLC|ITDCC

  cases:

    authorization granted:
      event: pre-processor
      desc: The sidecar has chosen to deny the access to the requested service.

      client:
        remote address: 127.0.0.1
        http verb: GET
        uri: https://api-unitttest.airfranceklm.com/fff?myQuery=123
        headers:
          Authorization: B

      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      key:
        package key: dfgf
        application:
          name: the-app

      # This is what should be sent to lambda
      sidecar:
        input:
          masheryMessageId: unit-test-call-uuid
          synchronicity: RequestResponse
          point: PreProcessor
          packageKey: dfgf
          serviceId: aServiceId
          endpointId: anEndpointId

          remoteAddress: 127.0.0.1
          request:
            headers:
              authorization: B
          params:
            B2C: false
            B2E: true
            depts: KLC|ITDCC

        output:
        # Output is an empty object, indicating that no action is needed

    authorization denied:
      event: pre-processor
      desc: The sidecar has chosen to deny the access to the requested service. This could be e.g. because the
       necessary claims are not set to the permitted combination.

      client:
        remote address: 127.0.0.1
        http verb: GET
        uri: https://api-unitttest.airfranceklm.com/fff?myQuery=123
        headers:
          Authorization: B

      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      key:
        package key: dfgf
        application:
          name: the-app

      # This is what should be sent to lambda
      sidecar:
        input:
          masheryMessageId: unit-test-call-uuid
          synchronicity: RequestResponse
          point: PreProcessor
          packageKey: dfgf
          serviceId: aServiceId
          endpointId: anEndpointId
          remoteAddress: 127.0.0.1
          request:
            headers:
              authorization: B
          params:
            B2C: false
            B2E: true
            depts: KLC|ITDCC

        output:
          code: 445
          message: Your department is not authorized to access this data

      expect traffic manager:
        set complete: true
        status code: 445
        headers:
          content-type: application/xml
        body: "<h1><![CDATA[Your department is not authorized to access this data]]></h1>"


Custom Header-Based Authentication:
  desc: In this case, AFKLM implements a custom authorization based on required header and key validation data

  use cases:
    - Replacement of ROPC with JWT tokens
    - Replacement of CC tokens with JWT tokens;
    - Second-factor authentication for SHA-256 endpoints

  endpoint:
    service id: aServiceId
    endpoint id: anEndpointId
    endpoint name: unit-test-endpoint

    pre-processor configuration:
      # Headers should be present and should contain value in it.
      require-request-headers: authorization
      require-eavs: Public_Key
      synchronicity: request-response

  cases:
    negative conclusion:
      event: pre-processor
      desc: The sidecar has chosen to deny the access to the requested service.

      client:
        remote address: 127.0.0.1
        http verb: GET
        uri: https://api-unitttest.airfranceklm.com/fff?myQuery=123
        headers:
          Authorization: B

        # RequestPayload can be for GET-type requests.

      key:
        package key: dfgf
        application:
          name: the-app
          extended attributes:
            Public_Key: b


      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      # This is what should be sent to lambda
      sidecar:
        input:
          masheryMessageId: unit-test-call-uuid
          synchronicity: RequestResponse
          point: PreProcessor
          packageKey: dfgf
          serviceId: aServiceId
          endpointId: anEndpointId
          request:
            headers:
              authorization: B
          eavs:
            Public_Key: b

        output:
          code: 431
          message: "Not permitted for this application at this time"

      expect traffic manager:
        set complete: true
        status code: 431
        headers:
          content-type: application/xml
        body: "<h1><![CDATA[Not permitted for this application at this time]]></h1>"

    invocation failure:
      event: pre-processor
      desc: The processor receives an error from the stack and sends back 500 error due to sure-fire error hanlding
            policy.

      client:
        remote address: 127.0.0.1
        http verb: GET
        uri: https://api-unitttest.airfranceklm.com/fff?myQuery=123
        headers:
          Authorization: B

        # RequestPayload can be for GET-type requests.

      key:
        package key: dfgf
        application:
          name: the-app
          extended attributes:
            Public_Key: b


      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      # This is what should be sent to lambda
      sidecar:
        input:
          masheryMessageId: unit-test-call-uuid
          synchronicity: RequestResponse
          point: PreProcessor
          packageKey: dfgf
          serviceId: aServiceId
          endpointId: anEndpointId
          request:
            headers:
              authorization: B
          eavs:
            Public_Key: b

        throw error: Unexpected error in the stack


      expect traffic manager:
        set complete: true
        status code: 500
        headers:
          content-type: application/xml
        body: "<h1><![CDATA[Internal server error before processing the call, code 0x000003BB]]></h1>"

    positive conclusion:
      event: pre-processor
      desc: The sidecar has chosen to deny the access to the requested service.

      client:
        remote address: 127.0.0.1
        http verb: GET
        uri: https://api-unitttest.airfranceklm.com/fff?myQuery=123
        headers:
          Authorization: B

        # RequestPayload can be for GET-type requests.

      key:
        package key: dfgf
        application:
          name: the-app
          extended attributes:
            Public_Key: b


      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      # This is what should be sent to lambda
      sidecar:
        input:
          masheryMessageId: unit-test-call-uuid
          synchronicity: RequestResponse
          point: PreProcessor
          packageKey: dfgf
          serviceId: aServiceId
          endpointId: anEndpointId
          request:
            headers:
              authorization: B
          eavs:
            Public_Key: b

        output:
          # Output is an empty object, indicating that no action is needed

    positive conclusion with additional authorization:
      event: pre-processor
      desc: The sidecar has chosen to deny the access to the requested service.

      client:
        remote address: 127.0.0.1
        http verb: GET
        uri: https://api-unitttest.airfranceklm.com/fff?myQuery=123
        headers:
          Authorization: B

        # RequestPayload can be for GET-type requests.

      key:
        package key: dfgf
        application:
          name: the-app
          extended attributes:
            Public_Key: b


      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      # This is what should be sent to lambda
      sidecar:
        input:
          masheryMessageId: unit-test-call-uuid
          synchronicity: RequestResponse
          point: PreProcessor
          packageKey: dfgf
          serviceId: aServiceId
          endpointId: anEndpointId
          request:
            headers:
              authorization: B
          eavs:
            Public_Key: b

        output:
          addHeaders:
            x-afklm-assurance: "3"
            x-afklm-channel: trusted

      expect api origin request modifications:
        added headers:
          x-afklm-assurance: "3"
          x-afklm-channel: trusted

    incomplete request due to missing header:

      event: pre-processor
      desc: If the client would not send the required header, then 400 error will be returned.

      client:
        remote address: 127.0.0.1
        http verb: GET
        uri: https://api-unitttest.airfranceklm.com/fff?myQuery=123

        # RequestPayload can be for GET-type requests.

      key:
        package key: dfgf
        application:
          name: the-app
          extended attributes:
            Public_Key: b


      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      # The request will not be forwarded to the sidecar at all.

      expect traffic manager:
        set complete: true
        status code: 403
        headers:
          content-type: application/xml
        body: "<h1><![CDATA[CDATA[Request pre-condition not met, code 0x000003BB]]></h1>"

    incomplete request due to missing EAV:

      event: pre-processor
      desc: If the client would not send the required header, then 400 error will be returned.

      client:
        remote address: 127.0.0.1
        http verb: GET
        uri: https://api-unitttest.airfranceklm.com/fff?myQuery=123
        headers:
            Authorization: B

        # RequestPayload can be for GET-type requests.

      key:
        package key: dfgf
        application:
          name: the-app

      request to the api provider:
        provider uri: https://docker.kml/backend/url?myQuery=ffff

      # This request will not be forwarded to the sidecar at all.

      expect traffic manager:
        set complete: true
        status code: 403
        headers:
          content-type: application/xml
        body: "<h1><![CDATA[CDATA[Request pre-condition not met, code 0x000003BB]]></h1>"

