#Inclusive filtering on scope:
#  desc: Test how filtering works on a single operation path.#
#
service id: srvId
endpoint id: endpId
endpoint name: unit-test-endpoint

endpoint uri: https://api-unitttest.airfranceklm.com/api-path
origin uri: https://docker.kml/backend/url

pre-processor configuration:
  when-tokenScope-pax: ~/.*role:pax.*/
  when-tokenScope-bax: ~/.*role:bax.*/
  elements: -headers,messageId,packageKey

---
name: positive confirmation
api client request:
  remote address: 123.456.789.012
  http verb: GET
  resource: /path/to/api-version_v1/op
  headers:
    A: B
    Content-Type: application/json+super-custom-extension
    AFKLM-Market: NL
  payload: ABC

  application:
    name: the-app
    package key:
      key: def

  authorization context:
    scope: "role:customer, role:pax"
    user context: "123 user-context 456"
    grant type: CC
    expires: "2020-03-24T13:48:09Z"

sidecar pre-processor:
  input:
    masheryMessageId: unit-test-call-uuid
    synchronicity: Event
    point: PreProcessor
    params:
      tokenScopeLabel: pax
    packageKey: def
    token:
      scope: role:customer, role:pax
    serviceId: srvId
    endpointId: endpId

  output:
  # An empty object, do nothing.
---
name:  filtered-out confirmation
inherited:
  - client-request

api client request:
  authorization context:
    scope: "scope-that-should-not-match"

---
name: filtered-out nulls confirmation
inherited:
  - client-http-request

api client request:
  # Context has been left null

# In this test, Lambda should not be even called.