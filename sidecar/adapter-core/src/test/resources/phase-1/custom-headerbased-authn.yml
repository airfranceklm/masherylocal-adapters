#
#Custom Header-Based Authentication:
#  desc: In this case, AFKLM implements a custom authorization based on required header and key validation data
#
#  use cases:
#    - Replacement of ROPC with JWT tokens
#    - Replacement of CC tokens with JWT tokens;
#    - Second-factor authentication for SHA-256 endpoints
#
service id: aServiceId
endpoint id: anEndpointId
endpoint name: unit-test-endpoint

endpoint uri: https://api-unitttest.airfranceklm.com
origin uri: https://docker.kml/backend/url

pre-processor configuration:
  elements: messageId|packageKey
  # Headers should be present and should contain value in it.
  require-request-headers: authorization
  require-eavs: Public_Key
  synchronicity: request-response

---
name: negative conclusion
point: PreProcessor
desc: The sidecar has chosen to deny the access to the requested service.

api client request:
  remote address: 127.0.0.1
  http verb: GET
  resource: /fff
  query params:
    myQuery: 123
  headers:
    Authorization: B

  application:
    name: the-app
    extended attributes:
      Public_Key: b

    package key:
      key: dfgf


# This is what should be sent to lambda
sidecar pre-processor:
  input:
    masheryMessageId: unit-test-call-uuid
    synchronicity: RequestResponse
    point: PreProcessor
    packageKey: dfgf
    serviceId: aServiceId
    endpointId: anEndpointId
    request:
      headers:
        authorization: B
    eavs:
      Public_Key: b

  output:
    terminate:
      statusCode: 431
      message: "Not permitted for this application at this time"

mashery response:
  complete: true
  status code: 431
  headers:
    Content-Type: application/xml
  payload: "<h1><![CDATA[Not permitted for this application at this time]]></h1>"

---

name: invocation failure
point: PreProcessor
desc: The processor receives an error from the stack and sends back 500 error due to sure-fire error hanlding
      policy.

inherited:
  - client-request
  - sidecar pre-processor request

sidecar pre-processor:
  throw exception: Unexpected error in the stack

mashery response:
  complete: true
  status code: 550
  headers:
    Content-Type: application/xml
  payload: "<h1><![CDATA[Internal server error before processing the call, code 0x000003BB]]></h1>"

---
name: positive conclusion
point: PreProcessor
desc: The sidecar has chosen to deny the access to the requested service.

inherited:
  - client-request
  - sidecar pre-processor request

# This is what should be sent to lambda
sidecar pre-processor:
    output:
      # Output is an empty object, indicating that no action is needed

---
name: positive conclusion with additional authorization
point: PreProcessor
desc: The sidecar has chosen to deny the access to the requested service.

inherited:
  - client-request
  - sidecar pre-processor request

# This is what should be sent to lambda
sidecar pre-processor:
  output:
    modify:
      passHeaders:
        x-afklm-assurance: "3"
        x-afklm-channel: trusted

request to the api origin:
  modify origin request:
    add headers:
      x-afklm-assurance: "3"
      x-afklm-channel: trusted

---
name: incomplete request due to missing header

point: PreProcessor
desc: If the client would not send the required header, then 400 error will be returned.

inherited:
  - application

api client request:
  remote address: 127.0.0.1
  http verb: GET
  resource: /fff
  query params:
    myQuery: 123

mashery response:
  complete: true
  status code: 403
  headers:
    Content-Type: application/xml
  payload: "<h1><![CDATA[CDATA[Request pre-condition not met, code 0x000003BB]]></h1>"

---
name: incomplete request due to missing EAV

point: PreProcessor
desc: If the client would not send the required header, then 400 error will be returned.

inherited:
  - client-request

api client request:
  application:
    name: the-app
    package key:
      key: dfgf

mashery response:
  complete: true
  status code: 403
  headers:
    Content-Type: application/xml
  payload: "<h1><![CDATA[CDATA[Request pre-condition not met, code 0x000003BB]]></h1>"

