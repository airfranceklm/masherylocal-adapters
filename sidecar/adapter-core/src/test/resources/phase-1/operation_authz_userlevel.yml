#name: User-level Operation Authorization
  #desc: Even more finer-grained access control, focusing on authorizing actions of the indvidiaul users. In this
  #    scenario, only a positive case will be considered since negative cases are effectively the repetition of
  #    those described in Operation Authorizaion scenario

  #  use cases:
  #   - Authorizing users for individual operations.

service id: aServiceId
endpoint id: anEndpointId
endpoint name: unit-test-endpoint

endpoint uri: https://api.airfranceklm.com/sampleApi/v2
origin uri: https://some.externally.hostted.backend.com/backend/v2

pre-processor configuration:
  synchronicity: request-response
  elements: operation,token,messageId,packageKey

---
name: access is granted to individual user
#      desc: The sidecar checks the access to the individual application based on the grant type and the role assigned.
#        We want to ensure that the users are logged in with a stronger credentials and that they have
#        specific role to invoke an operation.

point: PreProcessor

api client request:
  remote address: 127.0.0.1
  http verb: PUT
  resource: /controlled-operation/param/search
  query params:
    myQuery: p123

  application:
    name: the-app
    package key:
      key: dfgf

  authorization context:
    scope: role1 role2 role2
    user context: '{"level-of-assurance": 4, "name": "john", lastName: "doe"}'
    grant type: password
    expires: "2020-03-24T13:48:09Z"


sidecar pre-processor:
  input:
    masheryMessageId: unit-test-call-uuid
    synchronicity: RequestResponse
    point: PreProcessor
    packageKey: dfgf
    serviceId: aServiceId
    endpointId: anEndpointId
    operation:
      #uri: https://api.airfranceklm.com/sampleApi/v2/controlled-operation/param/search?myQuery=p123
      httpVerb: put
      path: /controlled-operation/param/search
      query:
        myQuery: p123

    token:
      grantType: password
      userContext: '{"level-of-assurance": 4, "name": "john", lastName: "doe"}'
      expires: "2020-03-24T13:48:09Z"
      scope: role1 role2 role2

  output:
  # Do-nothing, empty object is produced.